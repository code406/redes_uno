Autores: 
David Palomo Marcos (david.palomo@estudiante.uam.es), 
David Sierra Alonso (david.sierraa@estudiante.uam.es) 

CRITERIOS DE EVALUACIÓN SOLICITOS:

- Recibir y enviar datagramas UDP sin opciones IP ni fragmentación:
	REALIZADO.
	Tras enviar un datagrama UDP (opción 2) sin opciones ni fragmentación  a la ip 10.0.0.2, se envía este datagrama:
	bytearray(b'E\x00\x00(\x00\x00\x00\x00@\x11f\xc3\n\x00\x00\x01\n\x00\x00\x02\xaf9\x00P\x00\x14\x00\x00default test')

	Wireshark reconoce el datagrama como tipo UDP y el datagrama no tiene errores ni warnings.
	Se visualiza un mensaje ICMP de vuelta que nos indica que el puerto no está abierto (destination unreachable - port unreachable). 
	Creemos que puede deberse a la configuración de la red. En el envío de UDP a IPs como la 8.8.8.8 esto no ocurre.
	
	En el receptor, por terminal, se imprime lo siguiente:

	[process_UDP_message] RECEIVED bytearray(b'\xaf9\x00P\x00\x14\x00\x00default test\x00\x00\x00\x00\x00\x00')
	[2019-12-12 20:18:46,043 DEBUG]	b'\xaf9'
	[2019-12-12 20:18:46,043 DEBUG]	b'\x00P'
	[2019-12-12 20:18:46,043 DEBUG]	b'default test\x00\x00\x00\x00\x00\x00'


- Recibir y enviar mensajes ICMP sin opciones IP ni fragmentación (incluyendo pruebas con ping estándar):
	REALIZADO.
	El datagrama enviado es el siguiente:
	bytearray(b'E\x00\x00(\x00\x01\x00\x00@\x01f\xd2\n\x00\x00\x01\n\x00\x00\x02\x08\x00[\xd2\x00\x00\x00\x00default test')
	
	Wireshark reconoce el datagrama como tipo ICMP y no muestra errores ni warnings.
	En Wireshark vemos claramente como se responde al REQUEST mandando dos datagramas ICMP Reply,
	que son el nuestro y el del sistema operativo.

	En el receptor se muestra por terminal:

	[process_IP_datagram] Extracted all fields from datagram
	[2019-12-12 20:28:30,570 DEBUG]	20
	[2019-12-12 20:28:30,570 DEBUG]	bytearray(b'\x00\x00')
	[2019-12-12 20:28:30,570 DEBUG]	0
	[2019-12-12 20:28:30,570 DEBUG]	0
	[2019-12-12 20:28:30,570 DEBUG]	0
	[2019-12-12 20:28:30,571 DEBUG]	bytearray(b'\n\x00\x00\x01')
	[2019-12-12 20:28:30,571 DEBUG]	bytearray(b'\n\x00\x00\x02')
	[2019-12-12 20:28:30,571 DEBUG]	1
	[process_ICMP_message] Processing ICMP message with data bytearray(b'\x08\x00[\xd2\x00\x00\x00\x00default test\x00\x00\x00\x00\x00\x00')
	[2019-12-12 20:28:30,571 DEBUG]	8
	[2019-12-12 20:28:30,571 DEBUG]	0
	[process_ICMP_message] Received an ICMP_ECHO_REQUEST
	[sendICMPMessage] Sending message to 10.0.0.1

	Tras esta respuesta, el primero muestra (dos veces) lo siguiente:

	[process_ICMP_message] Received an ICMP_ECHO_REPLY
	ESTIMACION DE RTT: 0.9544885158538818

	En ocasiones, el tiempo obtenido ha sido negativo, lo que podría deberse a una mala interpretación de los valores.
	

- Enviar y recibir correctamente mensajes ICMP con opciones IP:
	REALIZADO.
	Ejecutamos el mismo comando pero con el argumento "--addOptions".
	Funciona como en el caso anterior, pero la trama tiene 6 bytes más.
		

- Enviar datagramas UDP con fragmentación:
	REALIZADO.
	Enviando un datagrama cuyo payload supera la MTU, se produce fragmentación.
	En el emisor, imprimimos por pantalla el envío de cada fragmento, que se realiza en el bucle
	de sendIPDatagram, donde todos los fragmentos tienen longitud máxima y MF=1, menos el último.

	---------------------- FRAGMENTO 1 ( i = 0 ) ----------------------
	[sendIPDatagram] Seems 10.0.0.2 is in my network.
	[ARPResolution] Who has 10.0.0.2?   
	[ARPResolution] Resolved MAC: A6:A3:77:0F:AE:1C
	---------------------- FRAGMENTO 2 ( i = 1 ) ----------------------
	[sendIPDatagram] Seems 10.0.0.2 is in my network.
	[ARPResolution] Who has 10.0.0.2?   
	[ARPResolution] Mac was cached: A6:A3:77:0F:AE:1C
	---------------------- FRAGMENTO 3 ( i = 2 ) ----------------------
	[sendIPDatagram] Seems 10.0.0.2 is in my network.
	[ARPResolution] Who has 10.0.0.2?   
	[ARPResolution] Mac was cached: A6:A3:77:0F:AE:1C
	---------------------- FRAGMENTO 4 ( i = 3 ) ----------------------

	En Wireshark observamos que se reensamblan al llegar el último fragmento ("Reassembled in #15").
	Es posible que la función que procesa el mensaje UDP esté loggeando mal los campos, ya que en los
	fragmentos posteriores al primero se loguea:

	[2019-12-12 20:37:00,325 DEBUG]	b'ul'
	[2019-12-12 20:37:00,325 DEBUG]	b't '
	[2019-12-12 20:37:00,325 DEBUG]	b'default testdefault testdefault testdefault testdefault testdefault testdefault testdefault testdefault testdefault testdefault testdefault testdefault testdefault testdefault testdefault testdefault testdefault testdefault test'
	

- Enviar datagramas UDP con fragmentación y opciones IP:
	REALIZADO.
	Añadiendo el argumento "--addOptions", la ejecución es idéntica a la del caso anterior, 
	por lo que funciona igual de bien que este.


- Enviar datagramas UDP fuera de la subred actual:
	REALIZADO.
	Comprobamos enviando el mismo datagrama UDP del caso anterior a la IP 8.8.8.8 (google).
	Se muestra que no pertenece a la subred, y por ello se busca la MAC del router, para realizar un salto.
	Esto se ve en Wireshark como un ARP Request de la Default Gateway (10.0.0.3), y después se mandan
	los fragmentos que luego hacen "reassemble in #51".

- NOTA:
	Aunque el datagrama enviado por sendIPDatagram contiene el checksum calculado, 
	en la función processIPDatagram no estamos comprobando si el checksum es correcto.
	Esto no influye al envío de paquetes, como se puede ver en Wireshark.